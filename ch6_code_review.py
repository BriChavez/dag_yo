import random
from datetime import timedelta, datetime
from airflow import DAG
from airflow.decorators import dag, task
from airflow.operators.dummy import DummyOperator
from airflow.operators.bash import BashOperator
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.utils.dates import days_ago


APPLE_BASKET = ["pink lady", "jazz", "orange pippin", "granny smith",
          "red delicious", "gala", "honeycrisp", "mcintosh", "fuji"]


def print_greeting():
    """A 'greeting' task that reads our echo and gives it back to us with a bonus string"""
    # open up our saved echo and save it to a variable called echo_file
    with open('opt/airflow/dags/ch6_code_review.txt', 'r') as echo_file:
        # release our echo from the file and say it back to us as a greeting
        print(
            f'Hey, {echo_file: read()}. Here is your echo back. make sure you keep better track of it next time')

def print_apple_string(apple_on_string):
    """function that takes a string as an argument and prints that string"""
    print(f'{apple_on_string}')

default_args = {
    """set out default args for the dag"""
    # assign owner so they know who it belongs to
    'owner': 'airflow',
    # set it to start to two days ago so it runs twice before we look at it
    'start_date': days_ago(2),
    # set the code to run once, and only once
    'schedule_interval': '@once',
    # allow it to retry the code if it fails, but just one time
    'retries': 1,
    # set how long to wait to retry to 1 minute
    'retry_delay': timedelta(minutes=1)}

with DAG(
    """dag instantiation, no breathing"""
    'apple_echo'
    description = 'A simple DAG to return our nam echo with a bonus random apple',
    # passing the arg as the defaults args
    default_args = default_args,
    tags = ['code_review', 'echo_back_yall']
) as dag:
    
    t1 = BashOperator(
        """echo to file task"""
        task_id = 'say_my_name',
        # task to take my echo and save it in a file for later
        bash_command = 'echo "bri" > /opt/airflow/dags/ch6_code_review.txt')

    t2 = PythonOperator(
        """Python function to greet me"""
        # name our greeting function
        task_id="echo_back"
        # call on our greeting function
        python_callable = print_greeting)

    t3 = BashOperator(
        """using a Bash operator, echo picking three random apples"""
        # name our echo apples operator
        task_id = 'rando_apples'
        # give our task the chore of yellin our echo back at us
        bash_command = 'echo "picking three apples at random from the apple basket"')

    # t4, t5, t6
    apple_task = []
    for n in range(3):
        """Use a for loop with range to create three Python operator tasks that will run simultaneously"""
        # Pass a random apple from the 'APPLES' list as the argument to that function.
        apple_on_string = random.choice(APPLE_BASKET)
        # create apple triplet task
        task = PythonOperator(
            # Have a unique task ID that includes the snumber generated by 'range'
            task_id = f"{n}",
            # Use a python_callable that calls a function that takes a string as an argument and prints that string
            python_callable = print_apple_string,
            # set our kwargs up to set a string with our random apple
            op_kwargs = {'The apple I have for you is a ': apple_on_string})
        # add our triplet tasks to apple task
        apple_task.append(task)

    t7 = EmptyOperator(
        """set an empty operator to end our day"""
        # name the emptiness
        task_id = "THE END", 
        # set it to go off when all of the previous tasks have done their thing
        trigger_rule = 'all_done')
    
    # set the task dependencies
    t1 >> t2 >> t3 >> [apple_task] >> t7
